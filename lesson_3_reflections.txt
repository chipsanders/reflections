When would you want to use a remote respository rather than keeping
all your work local?

You would want to use a remote repository when you have a project
that has more than one person working on it.  Or it may be that
you want to have access to the file from different computers or
different locations and don't want to have to store the file 
locally.

Why might you want to always pull changes manually rather than 
having Git automatically stay up-to-date with your remote 
repository?

You might want to manually pull changes rather than automating this
because you have control over when changes are pulled. It might not
make sense to pull changes from remote at certain points in your
projects development. If the changes were pulled automatically, 
this would likely cause more problems than it solved.

Describe the differences between forks, clones, and branches. When 
would you use one instead of another?

A fork is a clone that you create on git hub, it clones one repo
on git hub into another repo on git hub. A clone is a copy of a 
repo on your local computer; the source either being from git hub
or from your local computer. A branch is a commit or commit history
that is separate from the master branch, because it branched off
from master at some point. A branch can exist either locally or 
on git hub within a repository.

What is the benefit of having a copy of the last known state of the
remote stored locally?

The benefit of having a copy of the last known state of the remote
stored locally is that you can work offline.  Also you can know
the state of the remote as you work and you don't need to be 
connected to the remote repository to diff changes.

How would you collaborate without using Git or GitHub? What would
be easier and what would be harder?

You could use separate local copies of the files. It would be 
harder to keep track of the changes each person made to the
files and to merge the files. You could just use one copy of 
the file and each person could have it open only one person
at a time. This would slow down development. You could have 
an environment that let people make changes to the same file.
This would make it difficult to track changes as well as
avoid conflicts.

When would you want to make changes in a separate branch 
rather than directly in master? What benefits does each 
approach have?

If there is a reason to use a branch, such as to experiment
with the code, to delegate specific funtionality to separate
people, then it makes sense to make changes in branches 
instead of directly in master. The beneifits of using branches
is that you are able to logically separate out you code 
development. The benefit of making all changes in master is 
that it is easier to keep track of and keep all changes in 
sync.